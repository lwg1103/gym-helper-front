{"version":3,"sources":["Component/Excercise.tsx","Component/Training.tsx","Component/TrainingList.tsx","Component/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Excercise","Card","Header","Accordion","Toggle","eventKey","this","props","name","Collapse","Body","weight","repeats","series","breakTime","React","Component","Training","String","training","id","renderExcercises","excercises","map","element","i","TrainingList","renderTrainings","list","Home","componentDidMount","fetch","process","then","res","json","result","setState","availableTrainings","error","console","log","render","state","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"sQAqCeA,E,4JAxBX,WACE,OACE,eAACC,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,UACE,cAACC,EAAA,EAAUC,OAAX,CAAkBC,SAAUC,KAAKC,MAAMC,KAAvC,SACE,6BAAKF,KAAKC,MAAMC,WAGpB,cAACL,EAAA,EAAUM,SAAX,CAAoBJ,SAAUC,KAAKC,MAAMC,KAAzC,SACE,cAACP,EAAA,EAAKS,KAAN,UACE,eAACP,EAAA,EAAD,WACA,yCAAYG,KAAKC,MAAMI,OAAvB,SACJ,0CAAaL,KAAKC,MAAMK,WACxB,yCAAYN,KAAKC,MAAMM,UACvB,wCAAWP,KAAKC,MAAMO,UAAtB,sB,GAfcC,IAAMC,WC0BfC,E,4JA3BX,WACE,OACE,eAAChB,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,UACE,cAACC,EAAA,EAAUC,OAAX,CAAkBC,SAAUa,OAAOZ,KAAKC,MAAMY,SAASC,IAAvD,SACE,6BAAKd,KAAKC,MAAMY,SAASX,WAG7B,cAACL,EAAA,EAAUM,SAAX,CAAoBJ,SAAUa,OAAOZ,KAAKC,MAAMY,SAASC,IAAzD,SACE,cAACnB,EAAA,EAAKS,KAAN,UACE,cAACP,EAAA,EAAD,UACGG,KAAKe,8B,8BAQlB,WACE,OAAQf,KAAKC,MAAMY,SAASG,WAAWC,KAAI,SAACC,EAASC,GACjD,OAAQ,cAAC,EAAD,CAAWjB,KAAMgB,EAAQhB,KAAMM,UAAWU,EAAQV,UAAWF,QAASY,EAAQZ,QAASC,OAAQW,EAAQX,OAAQF,OAAQa,EAAQb,gB,GAtB1HI,IAAMC,WCadU,E,4JAbX,WACG,OAAO,cAACvB,EAAA,EAAD,UACFG,KAAKqB,sB,6BAIb,WACI,OAAOrB,KAAKC,MAAMqB,KAAKL,KAAI,SAACC,EAASC,GACjC,OAAQ,cAAC,EAAD,CAAUN,SAAUK,W,GATbT,IAAMC,WCiClBa,E,kDA7BX,WAAYtB,GAAmB,IAAD,8BAC1B,cAAMA,IAOZuB,kBAAoB,WAClBC,MAAMC,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZC,mBAAoBF,OAGxB,SAACG,GACCC,QAAQC,IAAIF,OAlBY,EAuB9BG,OAAS,WACP,OAAO,cAAC,EAAD,CAAcd,KAAM,EAAKe,MAAML,sBArBpC,EAAKK,MAAQ,CACTL,mBAAoB,IAJE,E,UAFfvB,IAAMC,WCCV4B,MATf,WAEE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCFdO,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.39414dc2.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card'\nimport Accordion from 'react-bootstrap/Accordion';\n\ntype ExcerciseProps = {\n    name: string,\n    weight: number,\n    repeats: number,\n    series: number,\n    breakTime: number\n}\n\nclass Excercise extends React.Component<ExcerciseProps> {\n    render() {\n      return (\n        <Card>\n          <Card.Header>\n            <Accordion.Toggle eventKey={this.props.name}>\n              <h1>{this.props.name}</h1>\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey={this.props.name}>\n            <Card.Body>\n              <Accordion>\n              <p>Weight: {this.props.weight} kg</p>\n          <p>Repeats: {this.props.repeats}</p>\n          <p>Series: {this.props.series}</p>\n          <p>Break: {this.props.breakTime} s</p>\n              </Accordion>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      );\n    }\n  }\n\n\nexport default Excercise;","import React from 'react';\nimport Excercise from './Excercise';\nimport { default as TrainingAPIType } from './../API/Training'\nimport Card from 'react-bootstrap/Card'\nimport Accordion from 'react-bootstrap/Accordion';\n\ntype TrainingProps = {\n    training: TrainingAPIType\n}\n\nclass Training extends React.Component<TrainingProps> {\n    render() {\n      return (\n        <Card>\n          <Card.Header>\n            <Accordion.Toggle eventKey={String(this.props.training.id)}>\n              <h1>{this.props.training.name}</h1>\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey={String(this.props.training.id)}>\n            <Card.Body>\n              <Accordion>\n                {this.renderExcercises()}\n              </Accordion>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      );\n    }\n\n    renderExcercises() {\n      return  this.props.training.excercises.map((element, i) => {     \n          return (<Excercise name={element.name} breakTime={element.breakTime} repeats={element.repeats} series={element.series} weight={element.weight}></Excercise>) \n       })\n     }\n  }\n\n\nexport default Training;","import React from 'react';\nimport { default as TrainingListAPIType } from './../API/TrainingList'\nimport Training from './Training';\nimport Accordion from 'react-bootstrap/Accordion';\n\ntype TrainingListProps = {\n    list: TrainingListAPIType\n}\n\nclass TrainingList extends React.Component<TrainingListProps> {\n    render() {\n       return <Accordion> \n           {this.renderTrainings()}\n        </Accordion>\n      }\n\n    renderTrainings() {\n        return this.props.list.map((element, i) => {     \n            return (<Training training={element} ></Training>) \n        })\n    }\n  }\n\nexport default TrainingList;","import React from 'react';\nimport TrainingList from './TrainingList';\nimport {default as TrainingListApiResponse} from '../API/TrainingList';\n\ntype HomeProps = {\n}\n\ntype HomeState = {\n    availableTrainings: TrainingListApiResponse\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n\n    constructor(props: HomeProps) {\n        super(props);\n\n        this.state = {\n            availableTrainings: []\n        }\n    }\n\n  componentDidMount = () =>  {\n    fetch(process.env.REACT_APP_API_SERVICE + \"/training\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            availableTrainings: result\n          });\n        },\n        (error) => {\n          console.log(error)\n        }\n      )\n  }\n\n    render = () => {\n      return <TrainingList list={this.state.availableTrainings}></TrainingList>\n    }\n  }\n\n\nexport default Home;","import './App.css';\nimport Home from './Component/Home'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}